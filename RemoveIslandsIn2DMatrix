def is_border(i, j, matrix):
  if i == 0 or i == len(matrix) - 1 or j == 0 or j == len(matrix[0]) - 1:
    return True
  return False

def is_outside_matrix(i, j, matrix):
  if < 0 or j < 0 or i > len(matrix) - 1 or j > len(matrix[0]) - 1:
    return True
  return False
  
def border_island_key(i, j):
  return '{}{}'.format(i, j)

def reccursion(i, j, matrix, border_islands):
  steps = [
    (0, 1)
    (1, 0)
    (0, -1)
    (-1, 0)
  ]
  for (ix, jx,) in steps:
    new_i = ix + i
    new_j = jx + j
    if is_outside_matrix(new_i, new_j, matrix):
      continue
    neighbor = matrix[new_i][new_j]
    key = border_island_key(new_i, new_j)
    if neighbor == 1 and not (key in border_islands:
      border_islands[key] = True
      reccursion(new_i, new_j, matrix, border_islands)

def remove_islands(matrix):
  border_islands = {}
  for i, row in enumerate(matrix):
    for j, value in enumerate(row):
      if value == 1 and is_border(i, j, matrix):
        if border_island_key in border_islands:
          continue
        border_islands[border_island_key(i, j)] = True
        reccursion(i, j, matrix, border_islands)
      
  for i, row in enumerate(matrix):
    for j, value in enumerate(row):
      if value == 1 and not (border_island_key(i, j)):    
        matrix[i][j] = 0
  return matrix
